#!/usr/bin/env python

import tf2_ros
from tf import transformations as tfn
from geometry_msgs.msg import PoseStamped

import rospy

T_base_link_to_map = np.zeros((4,4))
T_base_link_to_map[-1, -1] = 1

tf_msg = TransformStamped()

def invert_transform(T, T_out):
    T_out[:3,:3] = T[:3,:3].T
    T_out[:3,-1] = -np.matmul(T[:3,3].T, T[:3,-1])

def mocap_pose_cb(msg):
    global T_base_link_to_map, br, tf_msg
    pos = msg.pose.position
    trans = [pos.x, pos.y, pos.z]
    orientation = msg.pose.orientation
    rot_q = [orientation.x, orientation.y, orientation.z, orientation.w]
    angles = tf.transformations.euler_from_quaternion(rot_q)

    T = tfn.compose_matrix(translate=trans, angles=angles)
    invert_transform(T, T_base_link_to_map)
    _, _, new_angles, new_trans, _ = tfn.decompose_matrix(T_base_link_to_map)
    new_q = tfn.quaternion_from_euler(*new_angles)
    tf_msg.header.frame_id = 'base_link'
    tf_msg.header.stamp = msg.header.stamp
    tf_msg.child_frame_id = 'mocap'
    tf_msg.transform.translation.x = new_trans[0]
    tf_msg.transform.translation.y = new_trans[1]
    tf_msg.transform.translation.z = new_trans[2]
    tf_msg.transform.translation.w = new_trans[3]
    tf_msg.transform.rotation.x = new_q[0]
    tf_msg.transform.rotation.y = new_q[1]
    tf_msg.transform.rotation.z = new_q[2]
    tf_msg.transform.rotation.w = new_q[3]

    br.sendTransform(tf_msg)

rospy.init_node('add_mocap_tf_node')

rospy.Subscriber('~mocap_pose', PoseStamped, mocap_pose_cb)
br = tf2_ros.TransformBroadcaster()

rospy.spin()
