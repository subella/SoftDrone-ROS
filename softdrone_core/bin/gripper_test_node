#!/usr/bin/env python
"""Script to get a positions/velocities/lengths trajectory."""
import sys
import rospy
import numpy as np
import std_msgs.msg

from softdrone.python.control.find_trajectory import find_trajectory_for_interp
import softdrone_core


def send_lengths(pub, lengths, scale=True):
    """Set a length target to the gripper."""
    msg = std_msgs.msg.Int64MultiArray()
    if scale:
        msg.data = [int(1000 * length) for length in lengths]
    else:
        msg.data = [int(length) for length in lengths]

    msg_dim = std_msgs.msg.MultiArrayDimension()
    msg_dim.label = "data"
    msg_dim.size = 4
    msg_dim.stride = 4

    msg.layout.dim.append(msg_dim)
    msg.layout.data_offset = 0
    pub.publish(msg)


def main():
    """Run everything."""
    global tendon_target
    rospy.init_node("gripper_test_node")
    pub = rospy.Publisher("lengths", std_msgs.msg.Int64MultiArray, queue_size=10)

    intermediate_distance = 0.1
    num_frames = rospy.get_param("~num_frames", 2)

    grasp_position = np.array([2.0, 2.0, 0.5])
    start_position = np.array(rospy.get_param("~start_position", [0, 0, 1.5]))
    grasp_target = grasp_position - np.array(rospy.get_param("~offset", [0, 0, -0.2]))

    end_time = np.array(rospy.get_param("~end_time", 2))
    end_velocity = np.array(rospy.get_param("~end_velocity", [0, 0, 0]))
    end_offset = np.array(rospy.get_param("~end_offset", [0, 0, 0]))
    end_position = grasp_position + end_offset

    start_position[1] = grasp_target[1]  # force planar trajectory

    planner = find_trajectory_for_interp
    polynomial, lengths = planner(
        start_position=start_position,
        grasp_axis=0,
        grasp_position=grasp_position,
        grasp_target=grasp_target,
        grasp_time=5.0,
        grasp_velocity=np.array([0.0, 0.0, 0.0]),
        open_distance=0.1,
        use_offline_lengths=True,
        end_time=end_time,
        end_position=end_position,
        end_velocity=end_velocity,
    )
    print(lengths)

    rospy.loginfo("Replaying lengths")
    start_time = rospy.Time.now()
    rate = rospy.Rate(50)  # the actual code runs at 100
    while not rospy.is_shutdown():
        t = (rospy.Time.now() - start_time).to_sec()
        if t > polynomial._total_time:
            rospy.sleep(5)
            send_lengths(pub, [.190, .190, .208, .208])
            break

        send_lengths(pub, lengths.interp(t))
        rate.sleep()

    rospy.logwarn("Finished! Exiting")


if __name__ == "__main__":
    main()
