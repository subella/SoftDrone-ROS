#!/usr/bin/env python
import rospy
import numpy as np
from visualization_msgs.msg import Marker, MarkerArray
from geometry_msgs.msg import Point
from softdrone_core.msg import PolynomialTrajectory, GraspTrajectory
from softdrone_core.utils import get_trajectory_viz_markers
from softdrone_core import InterpTrajectoryTracker

from softdrone.python.control.find_trajectory import PolynomialInfo, LengthInfo


def waypoint_trajectory_cb(msg):
    global viz_pub
    coeffs = [msg.coeffs_x, msg.coeffs_y, msg.coeffs_z]
    poly_for_eval = [np.polynomial.polynomial.Polynomial(c) for c in coeffs]
    poly_wrapper = PolynomialInfo(poly_for_eval, msg.time_end)
    times = np.linspace(0, msg.time_end - msg.time_start, 50)
    pos_list = [poly_wrapper.interp(t)[0] for t in times]
    pts = [Point() for _ in times]
    for p, r in zip(pts, pos_list):
        p.x = r[0]
        p.y = r[1]
        p.z = r[2]
    ma = get_trajectory_viz_markers(pts, 'waypoint_trajectory', 0, (1,0,0))
    viz_pub.publish(ma)


viz_msg = None

def pub_grasp_trajectory_viz():
    global viz_pub, viz_msg
    if viz_msg is None:
        return
    
    viz_msg.markers[0].header.stamp = rospy.Time.now()
    viz_msg.markers[1].header.stamp = rospy.Time.now()
    viz_pub.publish(viz_msg)

def update_grasp_traj(msg):
    global viz_msg
    poly_msg = msg.polynomial
    t_vals = np.linspace(0, poly_msg.time_end - poly_msg.time_start, 50)
    poly_x = np.polynomial.Polynomial(poly_msg.coeffs_x)
    poly_y = np.polynomial.Polynomial(poly_msg.coeffs_y)
    poly_z = np.polynomial.Polynomial(poly_msg.coeffs_z)
    polynomial = PolynomialInfo([poly_x, poly_y, poly_z], poly_msg.time_end - poly_msg.time_start)

    length_msg = msg.lengths
    init_lengths = np.array(length_msg.init_lengths).reshape((4, 4))
    open_lengths = np.array(length_msg.open_lengths).reshape((4, 4))
    grasp_lengths = np.array(length_msg.grasp_lengths).reshape((4, 4))
    grasp_lengths = LengthInfo(init_lengths, open_lengths, grasp_lengths, length_msg.open_time, length_msg.grasp_time)

    poly_wrapper = InterpTrajectoryTracker(polynomial, grasp_lengths, length_msg.gripper_latency, 0)
    grasp_traj = [poly_wrapper._run_normal(t) for t in t_vals]
    pts = [Point() for _ in t_vals]
    for p, r in zip(pts, grasp_traj):
        if np.isnan(r.position[0]) or np.isnan(r.position[1]) or np.isnan(r.position[2]):
            return
        p.x = r.position[0]
        p.y = r.position[1]
        p.z = r.position[2]
    ma = get_trajectory_viz_markers(pts, 'grasp_trajectory', 2, (0, 1, 0), frame_id='target')

    init_marker = Marker()
    init_marker.header.frame_id = 'target'
    init_marker.header.stamp = rospy.Time.now()
    init_marker.ns = 'grasp_trajectory_pts'
    init_marker.id = 4
    init_marker.type = Marker.SPHERE
    init_marker.action = Marker.ADD
    init_marker.pose.orientation.w = 1.0
    init_marker.scale.x = 0.2
    init_marker.scale.y = 0.2
    init_marker.scale.z = 0.2
    init_marker.color.a = 0.5
    init_marker.color.r = 1
    init_marker.color.g = 0
    init_marker.color.b = 0
    init_marker.pose.position.x = pts[0].x
    init_marker.pose.position.y = pts[0].y
    init_marker.pose.position.z = pts[0].z

    ma.markers.append(init_marker)
    viz_msg = ma



rospy.init_node('polynomial_generator')

rospy.Subscriber('~waypoint_polynomial', PolynomialTrajectory, waypoint_trajectory_cb, queue_size=1)
#rospy.Subscriber('~grasp_trajectory', GraspTrajectory, grasp_trajectory_cb, queue_size=1)
rospy.Subscriber('~grasp_trajectory', GraspTrajectory, update_grasp_traj, queue_size=1)

viz_pub = rospy.Publisher('~trajectory_viz', MarkerArray, queue_size=1)

rate = rospy.Rate(5)
while not rospy.is_shutdown():
    pub_grasp_trajectory_viz()
    rate.sleep()
