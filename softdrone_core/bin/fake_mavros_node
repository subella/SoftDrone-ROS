#!/usr/bin/env python

import numpy as np
import rospy
from mavros_msgs.msg import State, PositionTarget
from mavros_msgs.srv import SetMode, SetModeResponse, CommandBool, CommandBoolResponse
from geometry_msgs.msg import PoseStamped, TwistStamped

def handle_arming(req):
    print("Arming: " + str(req.value))
    return CommandBoolResponse(True, 0)

def handle_set_mode(req):
    print("setting mode to: " + str(req.base_mode))
    return SetModeResponse(True)

def setpoint_cb(msg):
    global time_last, position_last

    ps = PoseStamped()
    ps.header.stamp = rospy.Time.now()
    ps.header.frame_id = 'map'
    ps.pose.position.x = msg.position.x
    ps.pose.position.y = msg.position.y
    ps.pose.position.z = msg.position.z
    ## Note, for now the grasp state machine doesn't care about orientation so we won't update it
    ps.pose.orientation.w = 1
    pose_pub.publish(ps)

    new_pos = np.array([msg.position.x, msg.position.y, msg.position.z])
    if position_last is not None:
        dx = new_pos - position_last
        dt = (rospy.Time.now() - time_last).to_sec()
        v = dx / dt
        # TODO: Also compute angular velocity
        twist_msg = TwistStamped()
        twist_msg.header.stamp = rospy.Time.now()
        twist_msg.header.frame_id = 'map'
        twist_msg.twist.linear.x = v[0]
        twist_msg.twist.linear.y = v[1]
        twist_msg.twist.linear.z = v[2]
        twist_pub.publish(twist_msg)

    position_last = new_pos
    time_last = rospy.Time.now()

rospy.init_node('sim_start_node')
rospy.Service('/mavros/set_mode', SetMode, handle_set_mode)
rospy.Service('/mavros/cmd/arming', CommandBool, handle_arming)

pose_pub = rospy.Publisher('/mavros/local_position/pose', PoseStamped, queue_size=1, latch=True)
twist_pub = rospy.Publisher('/mavros/local_position/twist', TwistStamped, queue_size=1, latch=True)
state_pub = rospy.Publisher('/mavros/state', State, queue_size=1, latch=True)
rospy.Subscriber('/mavros/setpoint_raw/local', PositionTarget, setpoint_cb)

time_last = rospy.Time.now()
position_last = None

# 1) send initial pose
initial_pose = [0, 0, 0]
ps = PoseStamped()
ps.header.stamp = rospy.Time.now()
ps.header.frame_id = 'map'
ps.pose.position.x = initial_pose[0]
ps.pose.position.y = initial_pose[1]
ps.pose.position.z = initial_pose[2]
ps.pose.orientation.w = 1
pose_pub.publish(ps)

# 1) set armed
state = State()
state.armed = True
state_pub.publish(state)

rospy.spin()
