#!/usr/bin/env python
import rospy
import numpy as np
from geometry_msgs.msg import PoseWithCovarianceStamped, TransformStamped
import tf
import tf2_ros
from nav_msgs.msg import Odometry


#self._takeoff_offset = rospy.get_param("~takeoff_offset", 1.0)
rospy.init_node('fake_target_node')
target_motion = rospy.get_param("~target_motion", 'circle')
radius = rospy.get_param("~radius", 1.0)
speed = rospy.get_param("~speed", 1.0)
height = rospy.get_param("~height", 0.0)
xc = rospy.get_param("~x", 0.0)
yc = rospy.get_param("~y", 0.0)
theta = rospy.get_param("~theta", 0.0)

circumference = 2.0*np.pi*radius

#target_pub = rospy.Publisher("~target_global", PoseWithCovarianceStamped, queue_size=1)
target_pub = rospy.Publisher("~target_global", Odometry, queue_size=1)
tf_broadcaster = tf2_ros.TransformBroadcaster()
target_transform = TransformStamped()
target_transform.header.frame_id = "map"
target_transform.child_frame_id = "target"

msg = PoseWithCovarianceStamped()
msg.pose.covariance = (0.001*np.eye(6).flatten()).tolist()
rate = rospy.Rate(20)
while not rospy.is_shutdown():
    t = rospy.Time.now().to_sec()
    if target_motion == 'circle':
        period = circumference / speed
        x = xc + radius * np.cos(2.0*np.pi*t/period)
        y = yc + radius * np.sin(2.0*np.pi*t/period)
        #q = tf.transformations.quaternion_from_euler(0,0,theta)
        angle = np.arctan2(y-yc, x-xc) + np.pi/2.
        q = tf.transformations.quaternion_from_euler(0,0,angle)
    elif target_motion == 'stationary':
        x = xc
        y = yc
        q = tf.transformations.quaternion_from_euler(0,0,theta)
    elif target_motion == 'rotating':
        x = xc
        y = yc
        theta = speed * t * 2*np.pi
        q = tf.transformations.quaternion_from_euler(0,0,theta)
    
    odom_msg = Odometry()
    odom_msg.header.stamp = rospy.Time.now()
    odom_msg.header.frame_id = 'map'
    odom_msg.child_frame_id = 'target'
    odom_msg.pose.pose.position.x = x
    odom_msg.pose.pose.position.y = y 
    odom_msg.pose.pose.position.z = height
    odom_msg.pose.pose.orientation.x = q[0]
    odom_msg.pose.pose.orientation.y = q[1] 
    odom_msg.pose.pose.orientation.z = q[2] 
    odom_msg.pose.pose.orientation.w = q[3]
    #odom_pub.publish(odom_msg)

    #msg.header.stamp = rospy.Time.now()
    #msg.header.frame_id = 'map'
    #msg.pose.pose.position.x = x
    #msg.pose.pose.position.y = y
    #msg.pose.pose.position.z = height
    #msg.pose.pose.orientation.x = q[0]
    #msg.pose.pose.orientation.y = q[1]
    #msg.pose.pose.orientation.z = q[2]
    #msg.pose.pose.orientation.w = q[3]

    target_transform.header.stamp = rospy.Time.now()
    target_transform.transform.translation.x = x
    target_transform.transform.translation.y = y
    target_transform.transform.translation.z = height
    target_transform.transform.rotation.x = q[0]
    target_transform.transform.rotation.y = q[1]
    target_transform.transform.rotation.z = q[2]
    target_transform.transform.rotation.w = q[3]
    tf_broadcaster.sendTransform(target_transform)

    target_pub.publish(odom_msg)
    rate.sleep()

