#!/usr/bin/env python
import tf
import rospy
import numpy as np
from geometry_msgs.msg import PoseWithCovarianceStamped
from nav_msgs.msg import Odometry

def vec_to_np(vec):
    np_arr = np.array([vec.x,
                       vec.y,
                       vec.z])
    return np_arr

def quat_to_euler_np(geo_quat):
    quat = [geo_quat.x,
            geo_quat.y, 
            geo_quat.z, 
            geo_quat.w]
    np_arr = np.asarray(tf.transformations.euler_from_quaternion(quat))
    return np_arr

class RollOut(object):
    def __init__(self):

        self.odom = None
        self.last_time = None
        self.last_pos = None
        self.last_rot = None
        self.vel = None
        self.ang_vel = None

        self.observed_sub = rospy.Subscriber("~observed",
                                              Odometry,
                                              self.observed_cb,
                                              queue_size=1)

        self.prediction_pub = rospy.Publisher("~predicted",
                                              PoseWithCovarianceStamped)

    def observed_cb(self, msg):
        self.odom = msg
        self.last_time = rospy.Time.now().to_sec()
        self.last_pos = vec_to_np(msg.pose.pose.position)
        self.last_rot = quat_to_euler_np(msg.pose.pose.orientation)
        self.vel = vec_to_np(msg.twist.twist.linear)
        self.ang_vel = vec_to_np(msg.twist.twist.angular)
        print("Observed vel", self.vel)
        print("Observed ang_vel", self.ang_vel)

    def spin(self):
        rate = rospy.Rate(50.0)
        while not rospy.is_shutdown():
            if self.last_pos is None or self.last_time is None:
                continue
    
            cur_time = rospy.Time.now().to_sec()
            dt = cur_time - self.last_time
    
            cur_pos = self.last_pos + self.vel * dt
            cur_rot = self.last_rot + self.ang_vel * dt
            pose = PoseWithCovarianceStamped()
            pose.header.stamp = rospy.Time.now()
            pose.header.frame_id = self.odom.header.frame_id
            pose.pose.pose.position.x = cur_pos[0]
            pose.pose.pose.position.y = cur_pos[1]
            pose.pose.pose.position.z = cur_pos[2]

            quat = tf.transformations.quaternion_from_euler(cur_rot[0], cur_rot[1], cur_rot[2])
            pose.pose.pose.orientation.x = quat[0]
            pose.pose.pose.orientation.y = quat[1]
            pose.pose.pose.orientation.z = quat[2]
            pose.pose.pose.orientation.w = quat[3]
            self.prediction_pub.publish(pose)

            self.last_time = cur_time
            self.last_pos = cur_pos
            self.last_rot = cur_rot
            rate.sleep()

def main():
    rospy.init_node("rollout_node")
    rollout = RollOut()
    while True:
        rollout.spin()

if __name__ == "__main__":
    main()
