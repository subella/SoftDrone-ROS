#!/usr/bin/env python
"""Node to control the gripper."""
import rospy
import std_msgs.msg
import std_srvs.srv
import serial


def _clip(x, low=0, high=255):
    """Clip a number."""
    if x < low:
        return low
    if x > high:
        return high
    return x


class GripperNode:
    """Node to hold gripper data."""

    def __init__(self):
        """Grab the device and start up."""
        self._port = rospy.get_param("~serial_port", "/dev/ttyACM0")
        self._baud_rate = rospy.get_param("~baud_rate", 57600)
        self._lengths = [150, 150, 167, 167]
        self._lengths_sub = rospy.Subscriber(
            "lengths",
            std_msgs.msg.Int64MultiArray,
            self._length_callback,
            queue_size=10,
        )
        self._open_serv = rospy.Service("open", std_srvs.srv.Empty, self._open_callback)

    def __enter__(self):
        """Open the serial connection."""
        self._serial_connection = serial.Serial(
            self._port, self._baud_rate, timeout=0.1
        )
        rospy.sleep(rospy.Duration(1.0))  # wait for the connection to settle
        return self

    def __exit__(self, exc_type, exc_value, exc_traceback):
        """Close the serial connection."""
        self._serial_connection.close()
        return exc_type is None

    def _open_callback(self, req):
        """Handle an open request."""
        self._lengths = [150, 150, 167, 167]
        resp = std_srvs.srv.EmptyResponse()
        return resp

    def _length_callback(self, msg):
        if len(msg.data) != 4:
            rospy.log_err("Must provide EXACTLY four lengths!")
        self._lengths = msg.data

    def _send_lengths(self):
        """Write the lengths straight to the gripper."""
        max_lengths = (175, 175, 192, 192)
        to_send = [_clip(length, high=max_length) for length, max_length in zip(self._lengths, max_lengths)]
        self._serial_connection.write("b{}\n".format(bytearray(to_send)))

    def spin(self):
        """Send lengths as long as ros is ok."""
        rate = rospy.Rate(10.0)
        while not rospy.is_shutdown():
            while self._serial_connection.in_waiting:
                rospy.logdebug(self._serial_connection.readline())

            self._send_lengths()
            rate.sleep()


def main():
    """Run everything."""
    rospy.init_node("gripper_node")

    with GripperNode() as node:
        node.spin()


if __name__ == "__main__":
    main()
