#!/usr/bin/env python
"""Quick node to provide fake local position estimate."""
import rospy
import geometry_msgs.msg
import mavros_msgs.msg
import pymavlink.dialects.v20.common as mavlink
import struct


AttitudeMessage = mavlink.MAVLink_attitude_quaternion_message


def handle_attitude(msg, pub):
    """Parse attitude."""
    if msg.msgid == AttitudeMessage.id:
        payload_bytes = struct.pack(len(msg.payload64) * "Q", *msg.payload64)[: msg.len]
        needed_bytes = struct.calcsize(AttitudeMessage.format)
        payload_bytes += "\x00" * (needed_bytes - msg.len)
        parsed = struct.unpack(AttitudeMessage.format, payload_bytes)
        msg_values = {
            name: value
            for name, value in zip(AttitudeMessage.ordered_fieldnames, parsed)
        }
        msg = geometry_msgs.msg.PoseStamped()
        msg.header.stamp = rospy.Time.now()
        msg.pose.orientation.w = msg_values["q1"]
        msg.pose.orientation.x = msg_values["q2"]
        msg.pose.orientation.y = msg_values["q3"]
        msg.pose.orientation.z = msg_values["q4"]
        msg.pose.position.x = 0.0
        msg.pose.position.y = 0.0
        msg.pose.position.z = 0.0
        pub.publish(msg)


def main():
    """Rospy node."""
    rospy.init_node("fake_pub")
    pub = rospy.Publisher(
        "/mavros/vision_pose/pose", geometry_msgs.msg.PoseStamped, queue_size=10
    )
    sub = rospy.Subscriber(
        "/mavlink/from",
        mavros_msgs.msg.Mavlink,
        lambda x: handle_attitude(x, pub),
        queue_size=10,
    )

    rospy.spin()


if __name__ == "__main__":
    main()
