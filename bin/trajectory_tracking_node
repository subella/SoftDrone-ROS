#!/usr/bin/env python
"""Script to get a positions/velocities/lengths trajectory."""
import intel_aero_ros
import rospy
import numpy as np
import geometry_msgs.msg

import importlib
import pathlib
import sys


def get_trajectory_planner():
    """Import the trajectory planner code."""
    soft_drone_pydir = pathlib.Path(__file__).resolve().parent.parent.parent / "python"
    sys.path.append(str(soft_drone_pydir))
    return importlib.import_module("soft_drone_python.find_trajectory").find_trajectory


tendon_target = None


def pose_handler(msg):
    """Wait for start pose."""
    global tendon_target
    tendon_target = np.array(
        [msg.pose.position.x, msg.pose.position.y, msg.pose.position.z]
    )


def main():
    """Run everything."""
    rospy.init_node("trajectory_tracking")

    total_time = rospy.get_param("~total_time", 2.5)
    intermediate_time = total_time * 3.0 / 4
    num_frames = rospy.get_param("~num_frames", 2)
    planner = get_trajectory_planner()

    # TODO(nathan) make this cleaner
    rospy.logwarn("Waiting for target pose")
    target_sub = rospy.Subscriber(
        "tendon_target", geometry_msgs.msg.PoseStamped, pose_handler, queue_size=10
    )

    while not rospy.is_shutdown() and tendon_target is None:
        rospy.sleep(rospy.Duration(0.1))

    if tendon_target is None:
        rospy.logwarn("ROS shutdown before planning ocurred.")
        return

    start_position = np.array(rospy.get_param("~start_position", [0, 0, 1.0]))
    end_position = tendon_target - np.array(rospy.get_param("~offset", [0, 0, -0.150]))

    rospy.logwarn(
        "Planning trajectory with {} frames over {} seconds".format(
            num_frames, total_time
        )
    )
    rospy.loginfo("Start: {}".format(start_position))
    rospy.loginfo("End: {}".format(end_position))
    rospy.loginfo("Tendon Target: {}".format(tendon_target))
    positions, velocities, lengths = planner(
        start_position,
        end_position,
        tendon_target,
        total_time=total_time,
        num_frames=num_frames,
        intermediate_time=intermediate_time,
        intermediate_objective="area",
    )

    rospy.logwarn("Planned Trajectory:")
    rospy.logwarn("===================")
    for i in range(num_frames):
        rospy.logwarn(
            "{}:\n  p: {}\n  v: {}\n  l: {}".format(
                i, positions[i], velocities[i], lengths[i]
            )
        )

    # this is janky, but we don't count the start in the setpoints that we're commanding
    frame_duration = total_time / (num_frames - 1)

    # Set up the things that will make this run
    trajectory_tracker = intel_aero_ros.TrajectoryTracker(
        positions, velocities, lengths, frame_duration
    )
    state_machine = intel_aero_ros.StateMachine(trajectory_tracker)  # NOQA

    rospy.spin()


if __name__ == "__main__":
    main()
