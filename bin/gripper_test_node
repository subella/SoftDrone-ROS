#!/usr/bin/env python
"""Script to get a positions/velocities/lengths trajectory."""
import intel_aero_ros
import rospy
import numpy as np
import std_msgs.msg

import importlib
import pathlib
import sys


def get_trajectory_planner():
    """Import the trajectory planner code."""
    soft_drone_pydir = pathlib.Path(__file__).resolve().parent.parent.parent / "python"
    # print(soft_drone_pydir)
    sys.path.insert(0, str(soft_drone_pydir))
    return importlib.import_module(
        "soft_drone_python.find_trajectory"
    ).find_trajectory_for_interp


def send_lengths(pub, lengths, scale=True):
    """Set a length target to the gripper."""
    msg = std_msgs.msg.Int64MultiArray()
    if scale:
        msg.data = [int(1000 * length) for length in lengths]
    else:
        msg.data = [int(length) for length in lengths]

    msg_dim = std_msgs.msg.MultiArrayDimension()
    msg_dim.label = "data"
    msg_dim.size = 4
    msg_dim.stride = 4

    msg.layout.dim.append(msg_dim)
    msg.layout.data_offset = 0
    pub.publish(msg)


def main():
    """Run everything."""
    global tendon_target
    rospy.init_node("gripper_test_node")
    pub = rospy.Publisher("lengths", std_msgs.msg.Int64MultiArray, queue_size=10)

    total_time = rospy.get_param("~total_time", 2.5)
    intermediate_distance = 0.1
    num_frames = rospy.get_param("~num_frames", 2)
    planner = get_trajectory_planner()

    tendon_target = np.array([0.0, 2.0, 0.5])
    start_position = np.array(rospy.get_param("~start_position", [0, 0, 1.5]))
    end_position = tendon_target - np.array(rospy.get_param("~offset", [0, 0, -0.160]))
    end_velocity = np.array(rospy.get_param("~end_velocity", [0, 0, 0]))
    start_position[0] = end_position[0]  # force planar trajectory

    rospy.loginfo("Start: {}".format(start_position))
    rospy.loginfo("End: {}".format(end_position))
    rospy.loginfo("Tendon Target: {}".format(tendon_target))
    polynomial, lengths = planner(
        start_position,
        end_position,
        tendon_target,
        total_time=total_time,
        num_frames=num_frames,
        intermediate_distance=intermediate_distance,
        intermediate_objective="area",
        end_velocity=end_velocity,
    )
    print(lengths)

    rospy.loginfo("Replaying lengths")
    start_time = rospy.Time.now()
    rate = rospy.Rate(50)  # the actual code runs at 100
    while not rospy.is_shutdown():
        t = (rospy.Time.now() - start_time).to_sec()
        if t > total_time:
            rospy.sleep(5)
            send_lengths(pub, [.150, .150, .167, .167])
            break

        send_lengths(pub, lengths.interp(t))
        rate.sleep()

    rospy.logwarn("Finished! Exiting")


if __name__ == "__main__":
    main()
