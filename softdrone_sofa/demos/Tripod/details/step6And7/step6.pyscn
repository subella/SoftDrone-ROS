# -*- coding: utf-8 -*-
"""
Step 7: we are showing how to add collision detection
and contact management in our project.

The important component to see in the graph are:
- the ones added by the addContact function
- the one in the "Collision" part of the tripod object
- the one in the "Collision" part of the Sphere object
"""
import Sofa
from splib.constants import Key
from tutorial import *
from stlib.physics.rigid import Sphere
from tripod import Tripod
from tripodcontroller import TripodController


class JumpController(Sofa.PythonScriptController):
    """Press Z/Q to play with the ball"""

    def __init__(self, node, actuators):
        self.actuators = actuators
        self.name = "JumpController"

    def onKeyPressed(self, key):
        apos = None
        if key == Key.Z:
            apos = -3.14/4
        if key == Key.Q:
            apos = -3.14/3

        if apos is not None:
            for actuator in self.actuators:
                actuator.servomotor.angle = apos


def createScene(rootNode):
    scene = Scene(rootNode)

    # Adding contact handling
    addContact(scene)

    Sphere(scene.Modelling, translation=[0.0, 40.0, 0.0],
           uniformScale=10.,
           totalMass=0.005)

    tripod = Tripod(scene.Modelling)
    tripod.addCollision()

    # The regular controller that is being used for the last 2 steps
    TripodController(scene, tripod.actuatedarms)

    # The additionnal controller that add two predefined positions for the three servomotors
    JumpController(scene, tripod.actuatedarms)

    scene.Simulation.addChild(tripod.ActuatedArm0)
    scene.Simulation.addChild(tripod.ActuatedArm1)
    scene.Simulation.addChild(tripod.ActuatedArm2)
